// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: app/api/proto/data.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataClient interface {
	TweetStream(ctx context.Context, in *TweetStreamRequest, opts ...grpc.CallOption) (Data_TweetStreamClient, error)
	EntityData(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) TweetStream(ctx context.Context, in *TweetStreamRequest, opts ...grpc.CallOption) (Data_TweetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Data_ServiceDesc.Streams[0], "/data.Data/TweetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataTweetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_TweetStreamClient interface {
	Recv() (*TweetStreamResponse, error)
	grpc.ClientStream
}

type dataTweetStreamClient struct {
	grpc.ClientStream
}

func (x *dataTweetStreamClient) Recv() (*TweetStreamResponse, error) {
	m := new(TweetStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataClient) EntityData(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/data.Data/EntityData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
// All implementations must embed UnimplementedDataServer
// for forward compatibility
type DataServer interface {
	TweetStream(*TweetStreamRequest, Data_TweetStreamServer) error
	EntityData(context.Context, *EntityRequest) (*EntityResponse, error)
	mustEmbedUnimplementedDataServer()
}

// UnimplementedDataServer must be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (UnimplementedDataServer) TweetStream(*TweetStreamRequest, Data_TweetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TweetStream not implemented")
}
func (UnimplementedDataServer) EntityData(context.Context, *EntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityData not implemented")
}
func (UnimplementedDataServer) mustEmbedUnimplementedDataServer() {}

// UnsafeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServer will
// result in compilation errors.
type UnsafeDataServer interface {
	mustEmbedUnimplementedDataServer()
}

func RegisterDataServer(s grpc.ServiceRegistrar, srv DataServer) {
	s.RegisterService(&Data_ServiceDesc, srv)
}

func _Data_TweetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TweetStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).TweetStream(m, &dataTweetStreamServer{stream})
}

type Data_TweetStreamServer interface {
	Send(*TweetStreamResponse) error
	grpc.ServerStream
}

type dataTweetStreamServer struct {
	grpc.ServerStream
}

func (x *dataTweetStreamServer) Send(m *TweetStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Data_EntityData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).EntityData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.Data/EntityData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).EntityData(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Data_ServiceDesc is the grpc.ServiceDesc for Data service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Data_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EntityData",
			Handler:    _Data_EntityData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TweetStream",
			Handler:       _Data_TweetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/api/proto/data.proto",
}
