// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package data

import (
	"context"
)

const getBird = `-- name: GetBird :one
SELECT id, name, entity_type, bird_fk, score, n_positive, n_negative, img_url FROM birds WHERE id = $1
`

func (q *Queries) GetBird(ctx context.Context, id int32) (*Bird, error) {
	row := q.db.QueryRow(ctx, getBird, id)
	var i Bird
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EntityType,
		&i.BirdFk,
		&i.Score,
		&i.NPositive,
		&i.NNegative,
		&i.ImgUrl,
	)
	return &i, err
}

const getBirds = `-- name: GetBirds :many
SELECT id, name, entity_type, bird_fk, score, n_positive, n_negative, img_url FROM birds ORDER BY score
`

func (q *Queries) GetBirds(ctx context.Context) ([]*Bird, error) {
	rows, err := q.db.Query(ctx, getBirds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Bird
	for rows.Next() {
		var i Bird
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EntityType,
			&i.BirdFk,
			&i.Score,
			&i.NPositive,
			&i.NNegative,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTweets = `-- name: GetTweets :many
SELECT id, body, bird_fk, author_name, author_username, post_time, score, certainty FROM tweets WHERE bird_fk = $1
`

func (q *Queries) GetTweets(ctx context.Context, birdFk int32) ([]*Tweet, error) {
	rows, err := q.db.Query(ctx, getTweets, birdFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Tweet
	for rows.Next() {
		var i Tweet
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.BirdFk,
			&i.AuthorName,
			&i.AuthorUsername,
			&i.PostTime,
			&i.Score,
			&i.Certainty,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
